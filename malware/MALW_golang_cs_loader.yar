rule golang_cs_loader{
	meta:
		version = "1.1"
		first_imported = "2023-01-13"
		last_modified = "2023-01-13"
		status = "RELEASED"
		sharing = "TLP:CLEAR"
		source = "Manual investigate"
		author = "TTC-CERT"
		description = "Detect Golang Cobalt Strike Loader file on filesystem"
		category = "TECHNIQUE"
		technique = "PROCESS INJECTION:SHELLCODE"
		mitre_att = "T1055"
		hash = "44f37aaf003e9ff80504cf5c08b0a3ec663665fbcc4ec966ff2643653e1ea4e3"
	strings:
		$str1 = "movie" ascii wide nocase
		$str2 = "C:/Coding/Golang/Movie/Vs" ascii wide nocase
		$f_str1 = "main.getpwd" ascii wide nocase
		$f_str2 = "main.test" ascii wide nocase
		$f_str3 = "main.run" ascii wide nocase
	condition:
		uint16(0) == 0x5A4D
		and (filesize >= 500KB and filesize <=3MB)
		and all of them 
}

rule code_injector{
	meta:
		version = "1.1"
		first_imported = "2023-01-13"
		last_modified = "2023-01-13"
		status = "RELEASED"
		sharing = "TLP:CLEAR"
		source = "Manual investigate"
		author = "TTC-CERT"
		description = "Detect code injection technique used by Golang Cobalt Strike Loader"
		technique = "PROCESS INJECTION:SHELLCODE"
		mitre_att = "T1055"
		hash = "44f37aaf003e9ff80504cf5c08b0a3ec663665fbcc4ec966ff2643653e1ea4e3"
		
	strings:
		$hex_code_injector = {0F B6 10 88 14 01 83 C0 01 39 E8 75 F3}
			/* 
			This code used to do AddressOfEntryPoint shellcode injection
			0f b6 10        MOVZX      EDX,byte ptr [EAX]=>local_24+0x1
			88 14 01        MOV        byte ptr [ECX + EAX*0x1],DL
			83 c0 01        ADD        EAX,0x1
			39 e8           CMP        EAX,EBP
			75 f3           JNZ        LAB_ADDR
			*/
	condition:
		all of them
}

rule payload_decryptor{
	meta:
		version = "1.1"
		first_imported = "2023-01-13"
		last_modified = "2023-01-13"
		status = "RELEASED"
		sharing = "TLP:CLEAR"
		source = "Manual investigate"
		author = "TTC-CERT"
		description = "Detect byte swapping and XOR algorithm used by Golang Cobalt Strike Loader"
		technique = "OBFUSCATED FILES OR INFORMATION"
		mitre_att = "T1027"
		hash = "44f37aaf003e9ff80504cf5c08b0a3ec663665fbcc4ec966ff2643653e1ea4e3"
	strings:
		$hex_payload_byte_swapping = {8B 3C 98 89 3C A8 89 34 98 45 4B 39 EB 7E 14 39 D5 0F 83 0A 03 00 00 8B 34 A8 39 D3 72 E2 E9 F5 02 00 00}
			/*
			This code used to byte swapping
			8B 3C 98			mov     edi, [eax+ebx*4]
			89 3C A8			mov     [eax+ebp*4], edi
			89 34 98			mov     [eax+ebx*4], esi
			45					inc     ebp
			4B					dec     ebx
			39 EB				cmp     ebx, ebp
			7E 14				jle     short after_swapping
			39 D5				cmp     ebp, edx
			0F 83 0A 03 00 00	jnb     to_panic
			8B 34 A8			mov     esi, [eax+ebp*4]
			39 D3				cmp     ebx, edx
			72 E2				jb      short SwappingDW
			E9 F5 02 00 00		jmp     loc_6EDE4F85
			*/
		$hex_payload_xor = {8D 0D [4] 0F B6 04 01 C7 04 24 [3] 00 C7 44 24 08 [3] 00 31 C6 87 DE 0F B6 C3 87 DE 89 44 24 04}
			/*
			This code used to XOR'd the payload
			8D 0D [4]					lea     ecx, aXOR_Key
			0F B6 04 01					movzx   eax, byte ptr [ecx+eax]
			C7 04 24 00 00 00 00		mov     [esp+124h+var_124], 0
			C7 44 24 08 00 00 00 00		mov     [esp+124h+var_11C], 0
			31 C6						xor     esi, eax
			87 DE						xchg    ebx, esi
			0F B6 C3					movzx   eax, bl
			87 DE						xchg    ebx, esi
			89 44 24 04					mov     [esp+124h+var_120], eax
			*/
	condition:
		any of them
}